print ("2+3");
print ("2"+"3");
print (2+3);
??iris
datasets::iris
datasets::iris
print (2+3)
print ("amol")
print (amol)
print ("amol"+"s")
print ("amol","s")
print ("amol"."s")
print("amol","suraj")
data("iris")
dta<-("iris")
dta
summary(iris)
summary(dta)
summary(iris)
??rf
librar(randomForest)
library(randomForest)
install.packages("randomForest")
library(randomForest)
2=2
2+2
install.packages("ggplot2")
install.packages("e1071")
install.packages("rpart")
install.packages("igraph")
install.packages("kernlab")
load("ggplot2")
library(ggplot2)
search()
install.packages("devtools")
library("devtools")
library("devtools")
find_rtools()
install.packages("KernSmooth")
clc
install.packages("caret")
1=2
library("xlsx")
dat<-read.xlsx("./data/2.xlsx",rowIndex=18:23,colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
dat<-read.xlsx("./data/2.xlsx",sheetIndex=1,rowIndex=18:23,colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","./data/2.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","./data/2.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","./data/2.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","./2.xlsx")
dat<-read.xlsx("./2.xlsx",sheetIndex=1,rowIndex=18:23,colIndex=7:15)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","./2.xlsx",mod="wb")
dat<-read.xlsx("./2.xlsx",sheetIndex=1,rowIndex=18:23,colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
library("XML")
install.packages("XML")
library("XML")
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
rootnode<-xmlRoot(doc)
xmlName(rootnode)
fileurl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternal=TRUE)
rootnode<-xmlRoot(doc)
xmlName(rootnode)
xmlpathSApply(rootnode,"//zipcode",21231)
xmlPathSApply(rootnode,"//zipcode",21231)
?xmlInternalTreeParse
xmlName(rootnode[[1]])
xmlName(rootnode[[1]][[1]])
xmlName(rootnode)
xmlName(rootnode[[1]])
names(rootnode[[1]])
xmlName(rootnode[[1]])
xmlName(rootnode[[1]][[1]])
names(rootnode[[1]][[1]])
zipcode<-xpathSApply(rootNode, "//zipcode", xmlValue)
zipcode<-xpathSApply(rootnode, "//zipcode", xmlValue)
table(zipcode == 21231)
table(zipcode)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","./data/2.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","./2.csv")
fread
fread("./2.csv")
library("data.table")
?fread
f<-fread("./2.csv")
DT<-fread("./2.csv")
?message
check <- function(y, t) {
message(sprintf("Elapsed time: %.10f", t[3]))
print(y)
}
system.time(y <- sapply(split(DT$pwgtp15, DT$SEX), mean))
y
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
getwd()
1>2
0.04>0.02
0.07<0.10
library(data.table)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./microdata3.csv")
DT <- fread("./microdata3.csv")
file.info("./microdata3.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2]
)
rm(list=ls())
?diag
View(DT)
rm(list=ls())
getwd()
setwd("D:/Data Science Certification/datasciencecoursera/5_Reproducable Research/Assignment 1")
input.data<-read.csv("activity.csv",header="TRUE")
input.data<-read.csv(file="activity.csv",header="TRUE")
input.data<-read.csv(file="activity.csv",header=TRUE)
str(input.data)
class(input.data$date)
table(input.data$date)
rm(list=ls())
data<-read.csv("activity.csv")
library(ggplot2)
total.steps<-tapply(data$steps,data$date,FUN=sum,na.rm=TRUE)
qplot(total.steps,binwidth=1000,xlab="Total number of steps taken each day")
mean(total.steps,na.rm=TRUE)
median(total.steps,na.rm=TRUE)
averages<-aggregate(data$steps,data$interval,FUN=mean,na.rm=TRUE)
ggplot(data=averages,aes(x=interval,y=steps))+geom_line()
+xlab("5-minute interval")+ylab("average number of steps taken")
class(data)
class(data$steps)
averages<-aggregate(list(data$steps),list(data$interval),FUN=mean,na.rm=TRUE)
ggplot(data=averages,aes(x=interval,y=steps))+geom_line()+
xlab("5-minute interval")+ylab("average number of steps taken")
averages<-aggregate(list(steps=data$steps),list(interval=data$interval),FUN=mean,na.rm=TRUE)
ggplot(data=averages,aes(x=interval,y=steps))+geom_line()+
xlab("5-minute interval")+ylab("average number of steps taken")
averages[which.max(averages$steps),]
missing<-is.na(data$steps)
table(missing)
fill.value<-function(steps,interval){
filled<-NA
if (!is.na(steps)){
filled<-c(steps)
}
else {
filled<-(averages[averages$interval==interval,"steps"])
}
return(filled)
}
filled.data<-data
filled.data$steps<-mapply(fill.value,filled.data$steps,filled.data$interval)
total.steps<-tapply(filled.data$steps,filled.data$date,FUN=sum)
qplot(total.steps,binwidth=1000,xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date){
day<-weekdays(date)
if(day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")){
return ("weekday")
}
else if(day %in% c("Saturday","Sunday")){
return ("weekend")
}
else{
stop("invalid date")
}
}
filled.data$date<-as.Date(filled.date$date)
filled.data$date<-as.Date(filled.data$date)
filled.data$day<-sapply(filled.data$date,FUN=weekday.or.weekend)
averages<-aggregate(steps~interval+day,data=filled.data,mean)
ggplot(averages,aes(interval,steps))+geom_line()+
facet_grid(day~.)+xlab("5-minute interval")+
ylab("Number of steps")
data<-read.csv("activity.csv")
library(ggplot2)
total.steps<-tapply(data$steps,data$date,FUN=sum,na.rm=TRUE)
png("plot1.png")
qplot(total.steps,binwidth=1000,xlab="Total number of steps taken each day")
dev.off()
mean(total.steps,na.rm=TRUE)
median(total.steps,na.rm=TRUE)
class(data$steps)
averages<-aggregate(list(steps=data$steps),list(interval=data$interval),FUN=mean,na.rm=TRUE)
png("plot2.png")
ggplot(data=averages,aes(x=interval,y=steps))+geom_line()+
xlab("5-minute interval")+ylab("average number of steps taken")
dev.off()
averages[which.max(averages$steps),]
missing<-is.na(data$steps)
table(missing)
fill.value<-function(steps,interval){
filled<-NA
if (!is.na(steps)){
filled<-c(steps)
}
else {
filled<-(averages[averages$interval==interval,"steps"])
}
return(filled)
}
filled.data<-data
filled.data$steps<-mapply(fill.value,filled.data$steps,filled.data$interval)
total.steps<-tapply(filled.data$steps,filled.data$date,FUN=sum)
png("plot3.png")
qplot(total.steps,binwidth=1000,xlab="total number of steps taken each day")
dev.off()
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date){
day<-weekdays(date)
if(day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")){
return ("weekday")
}
else if(day %in% c("Saturday","Sunday")){
return ("weekend")
}
else{
stop("invalid date")
}
}
filled.data$date<-as.Date(filled.data$date)
filled.data$day<-sapply(filled.data$date,FUN=weekday.or.weekend)
averages<-aggregate(steps~interval+day,data=filled.data,mean)
png("plot4.png")
ggplot(averages,aes(interval,steps))+geom_line()+
facet_grid(day~.)+xlab("5-minute interval")+
ylab("Number of steps")
dev.off()
